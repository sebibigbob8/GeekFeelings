var express = require('express');
var router = express.Router();
const MONGOOSE = require('mongoose');
const Rdv = require('../models/rdv');
//let Rdv = MONGOOSE.model('Rdv',Rdv.schema);
const ObjectId = MONGOOSE.Types.ObjectId;




/* GET all rdvs listing. */
router.get('/', function(req, res, next) {
    let query = Rdv.find({});
    console.log(Rdv);
    query.exec(function (err,docs)
    {
        if (err)
        {
            console.warn("Could not get all rdvs");
            next(err); //Fait suivre le message d'erreur
        }else{

            res.send(docs); //Renvoi des data
        }
    })
});


//OK

/**
 * Get a specified rdv
 */
router.get('/:id', function(req, res, next) {
    let query = Rdv.find({});
    query.exec(function (err,docs)
    {
        if (err)
        {
            console.warn("Could not get all rdvs");
            next(err); //Fait suivre le message d'erreur
        }else{
            res.send(docs); //Renvoi des data
        }
    })
});

/**
 * Get a rdv
 */
router.get('/:id',loadRdvById, function(req, res, next) {
    res.send(req.rdv);
});


/**
 * Modify a rdv
 */
router.patch('/:id',loadRdvById,function(req, res, next) {
    if (req.body.city !== undefined) {
        req.rdv.city = req.body.city;
    }
    if (req.body.npa !== undefined) {
        req.rdv.npa = req.body.npa;
    }
    if (req.body.street !== undefined) {
        req.rdv.street = req.body.street;
    }
    if (req.body.streetNumber !== undefined) {
        req.rdv.streetNumber = req.body.streetNumber;
    }
    if (req.body.description !== undefined) {
        req.rdv.description = req.body.category;
    }

    req.save(function(err, savedRdv) {
        if (err) {
            return next(err);
        }
        console.log(`Updated rdv "${savedRdv.purposeTitle}"`);
        res.send(savedRdv);
    });
});



//Faire attention à remodifier la partie example correctement

/**
 * @api {post} /api/rdvs Create a rdv
 * @apiName CreateRdv
 * @apiGroup Rdv
 * @apiVersion 1.0.0
 * @apiDescription Registers a new rdv.
 *
 * @apiUse MovieInRequestBody
 * @apiUse MovieInResponseBody
 * @apiUse MovieValidationError
 * @apiSuccess (Response body) {String} id A unique identifier for the movie generated by the server
 *
 * @apiExample Example
 *     POST /api/rdvs HTTP/1.1
 *     Content-Type: application/json
 *
 *     {
 *       "city": "Yverdon-les-Bains",
 *       "street": "Avenue des Sports",
 *       "npa": "1280"
 *       "streetNumber": "12"
 *       "purposeTitle": "Partie de Magic"
 *       "description": "Cherche un geek chaud à se faire une partie au calme"
 *       "category": "Magic"
 *     }
 *
 * @apiSuccessExample 201 Created
 *     HTTP/1.1 201 Created
 *     Content-Type: application/json
 *     Location: https://evening-meadow-25867.herokuapp.com/api/rdv/58b2926f5e1def0123e97281
 *
 *     {
 *       "city": "Yverdon-les-Bains",
 *       "street": Avenue des Sports,
 *       "npa": "1280"
 *       "streetNumber": "12"
 *       "purposeTitle": "Partie de Magic"
 *       "description": "Cherche un geek chaud à se faire une partie au calme"
 *       "category": "Magic"



 *       "directorHref": "/api/people/58b2926f5e1def0123e97bc0",
 *       "createdAt": "1988-07-12T00:00:00.000Z"
 *     }
 */
router.post('', function(req, res, next) {
    new Rdv(req.body).save(function(err, savedrdv) {
        if (err) {
            return next(err);
        }
        console.log(`Rdv created "${savedrdv}"`);
        res.status(201).send(savedrdv);
    });
});


/**
 * Delete a rdv
 */
router.delete('/:id', function(req, res, next) {
    req.rdv.remove(function(err) {
        if (err) {
            return next(err);
        }
        //  console.log(`Deleted rdv "${req.rdv.}"`);
        res.sendStatus(204);
    });
});

/**
 * Load a rdv
 */
function loadRdvById(req, res, next){
    const rdvId = req.params.id;
    if (!ObjectId.isValid(rdvId)) {
        return rdvNotFound(res, rdvId);
    }

    let query = Rdv.findById(rdvId)

    query.exec(function(err, rdv) {
        if (err) {
            console.warn("Could not get the rdv");
            next(err); //Fait suivre le message d'erreur
        } else if (!rdv) {
            //TODO
            //return rdvNotFound(res, rdvId);
        }
        req.rdv = rdv;
        next();
    });
}
/**
 * Message in case of an "not found"
 * @param res
 * @param rdvId
 * @returns {*}
 */
function rdvNotFound(res, rdvId) {
    return res.status(404).type('text').send(`No rdv found with ID ${rdvId}`);
}
module.exports = router;